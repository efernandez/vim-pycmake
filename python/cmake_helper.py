import os
from os import path

def find_includes(base_dir='.'):
    """
    This is the main function of this file.
    Given the path to a folder, it will scan up the tree
    to find a CMake repository and extract include paths
    from the files generated by CMake.

    Note: this looks for these files in a build/ subdir
    of the main project. Also, you have to run cmake first
    for this to work
    """

    cfdir = first(find_cmakefiles(base_dir=base_dir))
    if cfdir is None:
        return []
    includes = set()
    for p in find_file('flags.make', base_dir=cfdir, walk_down=True):
        with open(p) as f:
            for l in f:
                if 'CXX_FLAGS' in l:
                    includes.update([x[2:] for x in l.split() if x[0:2] == '-I'])
    return list(includes)


def find_cmakefiles(base_dir='.'):
    def check_fn(dname):
        return path.isdir(path.join(dname, 'CMakeFiles'))

    for p in find_dir('build', base_dir=base_dir, check_fn=check_fn):
        yield path.join(p, 'CMakeFiles')

def find_dir(dirname, base_dir='.', check_fn=None):
    return find_file(dirname, base_dir=base_dir, is_dir=True, check_fn=check_fn)

def find_file(fname, base_dir='.', is_dir=False, check_fn=None, walk_down=False):
    wk = os.walk if walk_down else walk_up
    for r, d, f in wk(base_dir):
        l = d if is_dir else f
        if fname in l:
            fpath = path.join(r, fname)
            if check_fn is not None:
                if not check_fn(fpath):
                    continue
            yield fpath

def first(gen):
    try:
        return next(gen)
    except StopIteration:
        return None

def walk_up(bottom):
    """
    mimic os.walk, but walk 'up'
    instead of down the directory tree
    """

    bottom = path.realpath(bottom)

    #get files in current dir
    try:
        names = os.listdir(bottom)
    except Exception as e:
        print e
        return

    dirs, nondirs = [], []
    for name in names:
        if path.isdir(path.join(bottom, name)):
            dirs.append(name)
        else:
            nondirs.append(name)

    yield bottom, dirs, nondirs

    new_path = path.realpath(path.join(bottom, '..'))

    # see if we are at the top
    if new_path == bottom:
        return

    for x in walk_up(new_path):
        yield x


# not used anymore
##################

def old_find_includes(filename, base_dir='.'):
    csrcdir = find_cmake_srcdir(filename, base_dir=base_dir)
    if csrcdir is None:
        return []
    p = path.join(csrcdir, 'flags.make')
    with open(p) as f:
        for l in f:
            if 'CXX_FLAGS' in l:
                return [x[2:] for x in l.split() if x[0:2] == '-I']
    return []

def find_cmake_srcdir(filename, base_dir='.'):
    def check_fn(fname):
        with open(fname) as f:
            for l in f:
                if filename in l:
                    return True
        return False

    csrcdir = first(find_cmakefiles(base_dir=base_dir))
    if csrcdir is None:
        return None
    res = first(find_file('DependInfo.cmake', base_dir=csrcdir, check_fn=check_fn, walk_down=True))
    if res is None:
        return None
    return path.dirname(res)

